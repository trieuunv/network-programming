package org.np

import kotlinx.coroutines.channels.Channel
import kotlinx.coroutines.channels.trySendBlocking
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.receiveAsFlow
import java.net.*
import kotlin.concurrent.thread

class UDPClient(private val username: String) {
    private var udpSocket: DatagramSocket? = null
    private var serverAddr: InetAddress? = null

    @Volatile private var isRunning = false

    private val messageChannel = Channel<String>(Channel.UNLIMITED)
    val incomingMessages: Flow<String> = messageChannel.receiveAsFlow()

    private fun report(msg: String) = messageChannel.trySendBlocking(msg)

    fun connect(serverHost: String = "192.168.1.4", serverPort: Int = 9876): Boolean {
        return try {
            serverAddr = InetAddress.getByName(serverHost)
            udpSocket = DatagramSocket()
            val joinMsg = "JOIN:$username".toByteArray()
            udpSocket!!.send(DatagramPacket(joinMsg, joinMsg.size, serverAddr, serverPort))

            val buffer = ByteArray(1024)
            val resp = DatagramPacket(buffer, buffer.size)
            udpSocket!!.soTimeout = 3000
            udpSocket!!.receive(resp)
            val response = String(resp.data, 0, resp.length).trim()

            if (response == "JOIN_OK") {
                report("‚úÖ ƒê√£ k·∫øt n·ªëi server.")
                startListener()
                isRunning = true
                true
            } else {
                report("‚ùå $response")
                false
            }
        } catch (e: Exception) {
            report("‚ùå K·∫øt n·ªëi th·∫•t b·∫°i: ${e.message}")
            false
        }
    }

    private fun startListener() {
        thread(isDaemon = true) {
            val buffer = ByteArray(2048)
            while (isRunning && udpSocket != null && !udpSocket!!.isClosed) {
                try {
                    val packet = DatagramPacket(buffer, buffer.size)
                    udpSocket!!.receive(packet)
                    val msg = String(packet.data, 0, packet.length).trim()
                    when {
                        // Tin nh·∫Øn chung
                        msg.startsWith("USERLIST:") -> report(msg)
                        msg.startsWith("PRIVATE:") -> report("üíå ${msg.substringAfter("PRIVATE:")}")
                        msg.startsWith("PRIVATE_SENT:") -> {
                            val content = msg.substringAfter("PRIVATE_SENT:")
                            // Format tin nh·∫Øn: üíå (ƒë·∫øn [receiver]): [content]
                            report("üíå (ƒë·∫øn $content")
                        }
                        // ‚úÖ Tin nh·∫Øn nh√≥m
                        msg.startsWith("GROUP_LIST:") -> report(msg)
                        msg.startsWith("GROUP_MSG:") -> {
                            // Format: GROUP_MSG:<T√™n nh√≥m>:<N·ªôi dung>
                            val parts = msg.substringAfter("GROUP_MSG:").split(":", limit = 2)
                            val groupName = parts[0]
                            val content = parts[1]
                            // Client nh·∫≠n tin nh·∫Øn nh√≥m. N·∫øu content b·∫Øt ƒë·∫ßu b·∫±ng [Username]:, ƒë√≥ l√† tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng kh√°c.
                            // N·∫øu content b·∫Øt ƒë·∫ßu b·∫±ng [currentUsername]:, ƒë√≥ l√† tin nh·∫Øn c·ªßa ch√≠nh m√¨nh.
                            report("[Nh√≥m $groupName] $content")
                        }

                        // ‚úÖ Ph·∫£n h·ªìi t·ª´ Server
                        msg.startsWith("GROUP_CREATED:") -> report("‚úÖ ƒê√£ t·∫°o nh√≥m: ${msg.substringAfter("GROUP_CREATED:")}")
                        msg.startsWith("GROUP_JOINED:") -> report("‚úÖ ƒê√£ tham gia nh√≥m: ${msg.substringAfter("GROUP_JOINED:")}")
                        msg.startsWith("GROUP_MSG_SENT:") -> {
                            // Kh√¥ng c·∫ßn hi·ªÉn th·ªã tin n√†y, ch·ªâ l√† x√°c nh·∫≠n
                        }

                        msg.startsWith("GROUP_LEFT:") -> report("üö™ ƒê√£ r·ªùi nh√≥m: ${msg.substringAfter("GROUP_LEFT:")}")

                        else -> report(msg)
                    }
                } catch (_: SocketTimeoutException) {
                } catch (e: Exception) {
                    if (isRunning) report("‚ö†Ô∏è L·ªói nh·∫≠n: ${e.message}")
                }
            }
        }
    }

    fun sendMessage(msg: String) {
        if (udpSocket == null || serverAddr == null) return
        val data = "MSG:$msg".toByteArray()
        udpSocket!!.send(DatagramPacket(data, data.size, serverAddr, 9876))
    }

    fun sendPrivateMessage(toUser: String, msg: String) {
        if (udpSocket == null || serverAddr == null) return
        val data = "PRIVATE:$toUser|$msg".toByteArray()
        udpSocket!!.send(DatagramPacket(data, data.size, serverAddr, 9876))
    }

    // ‚úÖ H√†m m·ªõi: G·ª≠i l·ªánh nh√≥m
    fun createGroup(groupName: String) {
        if (udpSocket == null || serverAddr == null) return
        val data = "CREATE_GROUP:$groupName".toByteArray()
        udpSocket!!.send(DatagramPacket(data, data.size, serverAddr, 9876))
    }

    fun requestGroupList() {
        if (udpSocket == null || serverAddr == null) return
        val data = "GROUP_LIST".toByteArray()
        udpSocket!!.send(DatagramPacket(data, data.size, serverAddr, 9876))
    }

    fun joinGroup(groupName: String) {
        if (udpSocket == null || serverAddr == null) return
        val data = "JOIN_GROUP:$groupName".toByteArray()
        udpSocket!!.send(DatagramPacket(data, data.size, serverAddr, 9876))
    }

    fun leaveGroup(groupName: String) {
        if (udpSocket == null || serverAddr == null) return
        val data = "LEAVE_GROUP:$groupName".toByteArray()
        udpSocket!!.send(DatagramPacket(data, data.size, serverAddr, 9876))
    }

    fun sendGroupMessage(groupName: String, msg: String) {
        if (udpSocket == null || serverAddr == null) return
        // Format: GROUP_MSG:<T√™n nh√≥m>|<N·ªôi dung>
        val data = "GROUP_MSG:$groupName|$msg".toByteArray()
        udpSocket!!.send(DatagramPacket(data, data.size, serverAddr, 9876))
    }

    fun disconnect() {
        if (udpSocket == null) return
        val leave = "LEAVE:$username".toByteArray()
        udpSocket!!.send(DatagramPacket(leave, leave.size, serverAddr, 9876))
        isRunning = false
        udpSocket?.close()
        report("üö™ ƒê√£ r·ªùi ph√≤ng.")
    }
}