package org.np

import kotlinx.coroutines.channels.Channel
import kotlinx.coroutines.channels.trySendBlocking
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.receiveAsFlow
import java.net.*
import kotlin.concurrent.thread

class MulticastChatClient(private val username: String) {
    private lateinit var group: InetAddress
    private var port: Int = 0
    private var multicastSocket: MulticastSocket? = null
    private var udpSocket: DatagramSocket? = null  // Socket ri√™ng cho tin nh·∫Øn c√° nh√¢n

    @Volatile private var isRunning = false
    @Volatile private var isListeningPrivate = false

    private val messageChannel = Channel<String>(Channel.UNLIMITED)
    val incomingMessages: Flow<String> = messageChannel.receiveAsFlow()

    private fun report(msg: String) {
        messageChannel.trySendBlocking(msg)
    }

    fun requestRoomFromServer(serverHost: String = "localhost", serverPort: Int = 9876): Boolean {
        try {
            // T·∫°o UDP socket v√† GI·ªÆ M·ªû ƒë·ªÉ nh·∫≠n tin nh·∫Øn ri√™ng
            udpSocket = DatagramSocket()
            val serverAddr = InetAddress.getByName(serverHost)

            // G·ª≠i l·ªánh JOIN:[USERNAME]
            val request = "JOIN:$username".toByteArray()
            val packet = DatagramPacket(request, request.size, serverAddr, serverPort)
            udpSocket!!.send(packet)

            // Nh·∫≠n ph·∫£n h·ªìi t·ª´ server
            val buffer = ByteArray(1024)
            val responsePacket = DatagramPacket(buffer, buffer.size)
            udpSocket!!.receive(responsePacket)

            val response = String(responsePacket.data, 0, responsePacket.length).trim()

            return if (response.startsWith("ROOM:")) {
                val parts = response.split(":")
                group = InetAddress.getByName(parts[1])
                port = parts[2].toInt()

                val localPort = udpSocket!!.localPort
                report("üì° Nh·∫≠n ph√≤ng: ${group.hostAddress}:$port")
                report("üîå UDP Socket c√° nh√¢n: localhost:$localPort")

                // B·∫Øt ƒë·∫ßu l·∫Øng nghe tin nh·∫Øn ri√™ng
                startPrivateMessageListener()

                true
            } else if (response.startsWith("ERROR:")) {
                report("‚ùå ${response.substring(6)}")
                udpSocket?.close()
                udpSocket = null
                false
            } else {
                report("‚ö†Ô∏è Server tr·∫£ v·ªÅ: $response")
                udpSocket?.close()
                udpSocket = null
                false
            }
        } catch (e: Exception) {
            report("‚ùå L·ªói y√™u c·∫ßu ph√≤ng: ${e.message}")
            udpSocket?.close()
            udpSocket = null
            return false
        }
    }

    private fun startPrivateMessageListener() {
        isListeningPrivate = true
        thread(isDaemon = true, name = "PrivateMessageListener") {
            val buffer = ByteArray(1024)
            report("üëÇ B·∫Øt ƒë·∫ßu l·∫Øng nghe tin nh·∫Øn ri√™ng...")

            while (isListeningPrivate && udpSocket != null && !udpSocket!!.isClosed) {
                try {
                    val packet = DatagramPacket(buffer, buffer.size)
                    udpSocket!!.receive(packet)
                    val message = String(packet.data, 0, packet.length).trim()

                    when {
                        message.startsWith("PRIVATE:") -> {
                            // Tin nh·∫Øn ri√™ng t·ª´ server
                            val content = message.substring(8)
                            report("üíå $content")
                        }
                        message.startsWith("PRIVATE_SENT:") -> {
                            // X√°c nh·∫≠n ƒë√£ g·ª≠i tin ri√™ng
                            val toUser = message.substring(13)
                            report("‚úÖ Tin nh·∫Øn ri√™ng ƒë√£ g·ª≠i ƒë·∫øn $toUser")
                        }
                        message.startsWith("ERROR:") -> {
                            report("‚ùå ${message.substring(6)}")
                        }
                        message == "PONG" -> {
                            // Heartbeat response
                        }
                        else -> {
                            report("üì® $message")
                        }
                    }
                } catch (e: SocketException) {
                    if (isListeningPrivate) {
                        report("‚ö†Ô∏è UDP socket ƒë√≥ng: ${e.message}")
                    }
                    break
                } catch (e: Exception) {
                    if (isListeningPrivate) {
                        report("‚ùå L·ªói nh·∫≠n tin ri√™ng: ${e.message}")
                    }
                }
            }
            report("üîá D·ª´ng l·∫Øng nghe tin nh·∫Øn ri√™ng")
        }
    }

    fun sendPrivateMessage(toUser: String, msg: String) {
        if (udpSocket == null || udpSocket!!.isClosed) {
            report("‚ö†Ô∏è Ch∆∞a k·∫øt n·ªëi ƒë·∫øn server.")
            return
        }

        try {
            val serverAddr = InetAddress.getByName("localhost")
            val request = "PRIVATE:$toUser|$username: $msg".toByteArray()
            val packet = DatagramPacket(request, request.size, serverAddr, 9876)
            udpSocket!!.send(packet)
            report("üíå ƒêang g·ª≠i ƒë·∫øn $toUser: $msg")
        } catch (e: Exception) {
            report("‚ùå L·ªói g·ª≠i tin ri√™ng: ${e.message}")
        }
    }

    fun joinRoom(): Boolean {
        if (!::group.isInitialized || port == 0) {
            report("‚ö†Ô∏è Ch∆∞a nh·∫≠n ƒë∆∞·ª£c th√¥ng tin ph√≤ng.")
            return false
        }

        try {
            multicastSocket = MulticastSocket(port)
            multicastSocket!!.joinGroup(group)
            isRunning = true
            report("üëã $username ƒë√£ tham gia ph√≤ng ${group.hostAddress}:$port")

            // Lu·ªìng nh·∫≠n tin nh·∫Øn multicast
            thread(isDaemon = true, name = "MulticastListener") {
                val buffer = ByteArray(1024)
                while (isRunning && multicastSocket != null && !multicastSocket!!.isClosed) {
                    try {
                        val packet = DatagramPacket(buffer, buffer.size)
                        multicastSocket!!.receive(packet)
                        val fullMessage = String(packet.data, 0, packet.length).trim()

                        when {
                            fullMessage.startsWith("USERLIST:") -> {
                                report(fullMessage)
                            }
                            !fullMessage.startsWith("[$username]") -> {
                                report(fullMessage)
                            }
                        }

                    } catch (e: SocketException) {
                        if (isRunning) {
                            report("‚ö†Ô∏è Multicast socket ƒë√≥ng: ${e.message}")
                        }
                        break
                    } catch (e: Exception) {
                        if (isRunning) {
                            report("‚ùå L·ªói nh·∫≠n tin multicast: ${e.message}")
                        }
                    }
                }
            }
            return true
        } catch (e: Exception) {
            report("‚ùå L·ªói tham gia ph√≤ng: ${e.message}")
            isRunning = false
            return false
        }
    }

    fun sendMessage(msg: String) {
        if (multicastSocket == null || !isRunning) {
            report("‚ö†Ô∏è Ch∆∞a tham gia ph√≤ng.")
            return
        }

        try {
            val fullMsg = "[$username]: $msg"
            val data = fullMsg.toByteArray()
            val packet = DatagramPacket(data, data.size, group, port)
            multicastSocket!!.send(packet)
            report(fullMsg)
        } catch (e: Exception) {
            report("‚ùå L·ªói g·ª≠i tin: ${e.message}")
        }
    }

    fun leaveRoom() {
        if (!isRunning && !isListeningPrivate) return

        // G·ª≠i l·ªánh LEAVE ƒë·∫øn server
        try {
            if (udpSocket != null && !udpSocket!!.isClosed) {
                val serverAddr = InetAddress.getByName("localhost")
                val request = "LEAVE:$username".toByteArray()
                val packet = DatagramPacket(request, request.size, serverAddr, 9876)
                udpSocket!!.send(packet)
            }
        } catch (e: Exception) {
            report("‚ö†Ô∏è L·ªói khi g·ª≠i l·ªánh LEAVE: ${e.message}")
        }

        // D·ª´ng c√°c lu·ªìng l·∫Øng nghe
        isRunning = false
        isListeningPrivate = false

        // ƒê√≥ng multicast socket
        try {
            multicastSocket?.leaveGroup(group)
            multicastSocket?.close()
            multicastSocket = null
        } catch (e: Exception) {
            report("‚ö†Ô∏è L·ªói ƒë√≥ng multicast socket: ${e.message}")
        }

        // ƒê√≥ng UDP socket
        try {
            udpSocket?.close()
            udpSocket = null
        } catch (e: Exception) {
            report("‚ö†Ô∏è L·ªói ƒë√≥ng UDP socket: ${e.message}")
        }

        messageChannel.close()
        report("üö™ $username ƒë√£ r·ªùi ph√≤ng.")
    }

    fun isConnected(): Boolean {
        return udpSocket != null && !udpSocket!!.isClosed && isListeningPrivate
    }
}