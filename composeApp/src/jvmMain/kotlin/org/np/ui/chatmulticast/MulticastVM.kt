package org.np.ui.chatmulticast

import androidx.compose.runtime.mutableStateListOf
import androidx.lifecycle.ViewModel
import kotlinx.coroutines.*
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import org.np.MulticastChatClient // Import Client t·ª´ package org.np

class MulticastVM(
    val username: String = "User${(1000..9999).random()}"
) : ViewModel() {

    private val scope = CoroutineScope(SupervisorJob() + Dispatchers.Default)

    // Tr·∫°ng th√°i cho UI
    private val _isJoined = MutableStateFlow(false)
    val isJoined: StateFlow<Boolean> = _isJoined.asStateFlow()

    private val _status = MutableStateFlow("Ng∆∞·ªùi d√πng: $username. Nh·∫•n Join Room.")
    val status: StateFlow<String> = _status.asStateFlow()

    val messages = mutableStateListOf<String>()

    // DANH S√ÅCH NG∆Ø·ªúI D√ôNG M·ªöI CHO SIDEBAR
    val userList = mutableStateListOf<String>()

    private val client = MulticastChatClient(username)

    init {
        scope.launch(Dispatchers.Default) {
            client.incomingMessages.collect { message ->
                when {
                    message.startsWith("USERLIST:") -> {
                        val users = message.substringAfter("USERLIST:").split(",").filter { it.isNotBlank() }
                        println(users)
                        withContext(Dispatchers.Main) {
                            userList.clear()
                            userList.addAll(users)
                            _status.value = "Danh s√°ch c·∫≠p nh·∫≠t: ${userList.size} ng∆∞·ªùi."
                        }
                    }

                    message.startsWith("üì°") || message.startsWith("üëã") || message.startsWith("‚ùå") || message.startsWith("‚ö†Ô∏è") || message.startsWith("üö™") -> {
                        _status.value = message
                        messages.add(message)
                        if (message.startsWith("üö™")) {
                            _isJoined.value = false
                        }
                    }
                    // Tin nh·∫Øn Multicast
                    else -> {
                        messages.add(message)
                    }
                }
            }
        }
    }

    fun joinRoom() {
        if (_isJoined.value) return
        _status.value = "ƒêang y√™u c·∫ßu ph√≤ng..."
        scope.launch(Dispatchers.IO) {
            val roomFound = client.requestRoomFromServer()
            if (roomFound) {
                val joined = client.joinRoom()
                _isJoined.value = joined
            }
        }
    }

    fun sendMessage(message: String) {
        if (message.isBlank() || !_isJoined.value) return
        scope.launch(Dispatchers.IO) {
            client.sendMessage(message)
        }
    }

    override fun onCleared() { // D√πng onCleared() c·ªßa ViewModel thay v√¨ close()
        client.leaveRoom()
        scope.cancel()
    }

    fun leaveRoom() {
        client.leaveRoom()
        _isJoined.value = false
        userList.clear() // X√≥a danh s√°ch ng∆∞·ªùi d√πng khi r·ªùi ph√≤ng
    }

    fun sendPrivateMessage(toUser: String, msg: String) {
        if (msg.isBlank() || !_isJoined.value) return
        if (toUser == username) {
            messages.add("‚ö†Ô∏è Kh√¥ng th·ªÉ g·ª≠i tin ri√™ng cho ch√≠nh m√¨nh.")
            return
        }

        scope.launch(Dispatchers.IO) {
            client.sendPrivateMessage(toUser, msg)
        }
    }
}