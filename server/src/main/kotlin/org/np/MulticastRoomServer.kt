package org.np

import java.net.DatagramPacket
import java.net.DatagramSocket
import java.net.InetAddress
import java.net.MulticastSocket
import java.net.SocketException
import java.util.concurrent.ConcurrentHashMap
import kotlin.concurrent.thread

class MulticastRoomServer(private val port: Int = 9876) {
    private val multicastAddress = "230.0.0.1"
    private val multicastPort = 4446

    @Volatile private var isRunning = false
    private var socket: DatagramSocket? = null

    // B·∫¢NG ƒêƒÇNG K√ù: Username -> (Address, Port)
    private val clientRegistry = ConcurrentHashMap<String, Pair<InetAddress, Int>>()

    fun start() {
        isRunning = true
        socket = DatagramSocket(port)
        println("üöÄ Server qu·∫£n l√Ω ph√≤ng ƒëang ch·∫°y t·∫°i port $port...")

        thread(isDaemon = true) {
            val buffer = ByteArray(1024)
            while (isRunning) {
                try {
                    val packet = DatagramPacket(buffer, buffer.size)
                    socket!!.receive(packet)

                    // Ph√¢n t√≠ch c√∫ ph√°p: [L·ªÜNH]:[D·ªÆ LI·ªÜU]
                    val fullMessage = String(packet.data, 0, packet.length).trim()
                    val parts = fullMessage.split(":", limit = 2)
                    val command = parts[0].uppercase()
                    val data = if (parts.size > 1) parts[1] else ""

                    processRequest(socket!!, packet, command, data)

                } catch (e: SocketException) {
                    if (isRunning) println("‚ùå L·ªói Socket: ${e.message}")
                    break
                } catch (e: Exception) {
                    println("‚ùå L·ªói x·ª≠ l√Ω y√™u c·∫ßu: ${e.message}")
                }
            }
        }
    }

    fun stop() {
        isRunning = false
        socket?.close()
        println("üõë Server ƒë√£ d·ª´ng.")
    }

    private fun sendResponse(socket: DatagramSocket, address: InetAddress, port: Int, response: String) {
        try {
            val responseData = response.toByteArray()
            val responsePacket = DatagramPacket(responseData, responseData.size, address, port)
            socket.send(responsePacket)
        } catch (e: Exception) {
            println("‚ùå L·ªói g·ª≠i ph·∫£n h·ªìi ƒë·∫øn ${address.hostAddress}:$port - ${e.message}")
        }
    }

    private fun broadcastUserList() {
        val userList = clientRegistry.keys.joinToString(",")
        val message = "USERLIST:$userList"
        println("üì¢ C·∫≠p nh·∫≠t danh s√°ch ng∆∞·ªùi d√πng: $userList")

        try {
            // G·ª≠i qua multicast
            val group = InetAddress.getByName(multicastAddress)
            val multicastSocket = MulticastSocket()
            val packet = DatagramPacket(message.toByteArray(), message.length, group, multicastPort)
            multicastSocket.send(packet)
            multicastSocket.close()
        } catch (e: Exception) {
            println("‚ùå L·ªói broadcast danh s√°ch: ${e.message}")
        }
    }

    private fun processRequest(socket: DatagramSocket, packet: DatagramPacket, command: String, data: String) {
        val clientAddress = packet.address
        val clientPort = packet.port

        when (command) {
            "JOIN" -> {
                // data = [USERNAME]
                if (data.isBlank()) {
                    sendResponse(socket, clientAddress, clientPort, "ERROR:Thi·∫øu Username")
                    return
                }

                // Ki·ªÉm tra username ƒë√£ t·ªìn t·∫°i
                if (clientRegistry.containsKey(data)) {
                    sendResponse(socket, clientAddress, clientPort, "ERROR:Username '$data' ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng")
                    return
                }

                // ƒêƒÉng k√Ω Client v√† g·ª≠i th√¥ng tin Multicast
                clientRegistry[data] = Pair(clientAddress, clientPort)
                val response = "ROOM:$multicastAddress:$multicastPort"
                sendResponse(socket, clientAddress, clientPort, response)
                println("‚úÖ ƒêƒÉng k√Ω: $data t·∫°i ${clientAddress.hostAddress}:$clientPort")

                broadcastUserList()
            }

            "PRIVATE" -> {
                val parts = data.split("|", limit = 2)
                if (parts.size < 2) {
                    sendResponse(socket, clientAddress, clientPort, "ERROR:Sai c√∫ ph√°p PRIVATE")
                    return
                }

                val toUser = parts[0]
                val content = parts[1]
                val targetInfo = clientRegistry[toUser]

                if (targetInfo != null) {
                    val privateMsg = "PRIVATE:$content"
                    sendResponse(socket, targetInfo.first, targetInfo.second, privateMsg)
                    println("üì© Tin ri√™ng ƒë·∫øn $toUser (${targetInfo.first.hostAddress}:${targetInfo.second}): $content")

                    // X√°c nh·∫≠n cho ng∆∞·ªùi g·ª≠i
                    sendResponse(socket, clientAddress, clientPort, "PRIVATE_SENT:$toUser")
                } else {
                    sendResponse(socket, clientAddress, clientPort, "ERROR:Ng∆∞·ªùi d√πng '$toUser' kh√¥ng t·ªìn t·∫°i")
                }
            }

            "LEAVE" -> {
                // data = [USERNAME]
                if (clientRegistry.remove(data) != null) {
                    println("üö™ H·ªßy ƒëƒÉng k√Ω: $data")
                    broadcastUserList()
                    sendResponse(socket, clientAddress, clientPort, "LEAVE_OK:ƒê√£ r·ªùi ph√≤ng")
                }
            }

            "PING" -> {
                // Heartbeat ƒë·ªÉ ki·ªÉm tra k·∫øt n·ªëi
                sendResponse(socket, clientAddress, clientPort, "PONG")
            }

            else -> {
                sendResponse(socket, clientAddress, clientPort, "ERROR:L·ªánh kh√¥ng h·ª£p l·ªá")
            }
        }
    }
}